class ColorPaletteSite {
  constructor() {
    this.body = document.body;
    this.colorButtons = document.querySelectorAll(".color-btn");
    this.casesBtn = document.getElementById("casesBtn");
    this.miniGamesBtn = document.getElementById("miniGamesBtn");
    this.spinningOverlay = document.getElementById("spinningOverlay");
    this.closeBtn = document.getElementById("closeBtn");

    this.init();
  }

  init() {
    this.bindColorButtons();
    this.bindFooterButtons();
    this.bindCloseButton();
  }

  bindColorButtons() {
    this.colorButtons.forEach((button) => {
      button.addEventListener("click", (e) => {
        this.changeTheme(e.target);
      });
    });
  }

  bindFooterButtons() {
    this.casesBtn.addEventListener("click", () => {
      this.showSpinningAnimation();
    });

    this.miniGamesBtn.addEventListener("click", () => {
      this.showMessage("–ú–∏–Ω–∏ –∏–≥—Ä—ã —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã!");
    });
  }

  bindCloseButton() {
    this.closeBtn.addEventListener("click", () => {
      this.hideSpinningAnimation();
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ —Ñ–æ–Ω
    this.spinningOverlay.addEventListener("click", (e) => {
      if (e.target === this.spinningOverlay) {
        this.hideSpinningAnimation();
      }
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ Escape
    document.addEventListener("keydown", (e) => {
      if (e.key === "Escape" && this.spinningOverlay.style.display === "flex") {
        this.hideSpinningAnimation();
      }
    });
  }

  changeTheme(button) {
    const bgColor = button.dataset.bg;
    const textColor = button.dataset.text;

    // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç ripple
    this.createRippleEffect(button);

    // –ü–ª–∞–≤–Ω–æ –º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–∞
    this.body.style.backgroundColor = bgColor;
    this.body.style.color = textColor;

    // –î–æ–±–∞–≤–ª—è–µ–º feedback –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    this.showMessage(`–¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${bgColor}`);
  }

  createRippleEffect(button) {
    button.style.transform = "scale(1.2)";
    setTimeout(() => {
      button.style.transform = "scale(1)";
    }, 200);
  }

  showSpinningAnimation() {
    this.spinningOverlay.style.display = "flex";

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ä—É–ª–µ—Ç–∫–∏
    this.generateRouletteItems();

    // –°–±—Ä–æ—Å –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const rouletteTrack = document.getElementById("rouletteTrack");
    const closeBtn = this.closeBtn;
    const winnerDisplay = document.getElementById("winnerDisplay");

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–ª–∞—Å—Å—ã –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
    rouletteTrack.classList.remove("spinning");
    rouletteTrack.style.transform = "translateX(100%)";

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Ä—É–ª–µ—Ç–∫–∏
    setTimeout(() => {
      rouletteTrack.classList.add("spinning");
    }, 50);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
    setTimeout(() => {
      this.showWinningItem();
    }, 5000);

    // –°–±—Ä–æ—Å –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
    closeBtn.style.opacity = "0";
    closeBtn.style.animation = "none";
    closeBtn.offsetHeight; // Trigger reflow
    closeBtn.style.animation = "showCloseBtn 0.5s ease 5s forwards";

    // –°–±—Ä–æ—Å –¥–∏—Å–ø–ª–µ—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    winnerDisplay.style.opacity = "0";
    winnerDisplay.style.animation = "none";
    winnerDisplay.offsetHeight; // Trigger reflow
  }

  showWinningItem() {
    const winnerDisplay = document.getElementById("winnerDisplay");
    const rouletteTrack = document.getElementById("rouletteTrack");

    // –í—ã—á–∏—Å–ª—è–µ–º, –∫–∞–∫–æ–π —ç–ª–µ–º–µ–Ω—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–¥ —É–∫–∞–∑–∞—Ç–µ–ª–µ–º
    const containerCenter =
      this.spinningOverlay.querySelector(".roulette-container").offsetWidth / 2;
    const trackPosition = -1100; // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –∏–∑ –∞–Ω–∏–º–∞—Ü–∏–∏

    // –í—ã—á–∏—Å–ª—è–µ–º —à–∏—Ä–∏–Ω—É —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞
    const viewportWidth = window.innerWidth;
    let itemWidth;

    if (viewportWidth <= 480) {
      itemWidth = Math.max(50, viewportWidth * 0.18) + viewportWidth * 0.02; // 18vw + 2vw –æ—Ç—Å—Ç—É–ø—ã
    } else if (viewportWidth <= 768) {
      itemWidth = Math.max(60, viewportWidth * 0.2) + viewportWidth * 0.02; // 20vw + 2vw –æ—Ç—Å—Ç—É–ø—ã
    } else {
      itemWidth = Math.min(120, viewportWidth * 0.25) + viewportWidth * 0.03; // 25vw + 3vw –æ—Ç—Å—Ç—É–ø—ã
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ–¥ —É–∫–∞–∑–∞—Ç–µ–ª–µ–º
    const visibleItemIndex = Math.floor(
      (containerCenter - trackPosition) / itemWidth
    );
    const items = [
      "üéÆ",
      "üéØ",
      "üé≤",
      "üé™",
      "üé®",
      "üèÜ",
      "üíé",
      "‚≠ê",
      "üéä",
      "üéÅ",
      "üî•",
      "‚ö°",
    ];
    const winningItem = items[visibleItemIndex % items.length];

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
    winnerDisplay.textContent = winningItem;
    winnerDisplay.style.animation = "showWinner 0.8s ease forwards";
  }

  generateRouletteItems() {
    const rouletteTrack = document.getElementById("rouletteTrack");
    const items = [
      "üéÆ",
      "üéØ",
      "üé≤",
      "üé™",
      "üé®",
      "üèÜ",
      "üíé",
      "‚≠ê",
      "üéä",
      "üéÅ",
      "üî•",
      "‚ö°",
    ];

    // –û—á–∏—â–∞–µ–º —Ç—Ä–µ–∫
    rouletteTrack.innerHTML = "";

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
    // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –Ω–∞–±–æ—Ä –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø—Ä–∞–≤–∞ (–Ω–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è)
    for (let cycle = 0; cycle < 3; cycle++) {
      items.forEach((item, index) => {
        const rouletteItem = document.createElement("div");
        rouletteItem.className = "roulette-item";
        rouletteItem.textContent = item;

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è shimmer —ç—Ñ—Ñ–µ–∫—Ç–∞
        rouletteItem.style.animationDelay = `${
          (cycle * items.length + index) * 0.1
        }s`;

        rouletteTrack.appendChild(rouletteItem);
      });
    }
  }

  hideSpinningAnimation() {
    this.spinningOverlay.style.display = "none";

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
    const rouletteTrack = document.getElementById("rouletteTrack");
    const winnerDisplay = document.getElementById("winnerDisplay");

    rouletteTrack.classList.remove("spinning");
    rouletteTrack.style.transform = "";
    winnerDisplay.style.animation = "none";
    winnerDisplay.style.opacity = "0";
  }

  showMessage(message) {
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notification = document.createElement("div");
    notification.textContent = message;
    notification.style.cssText = `
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    background: rgba(0,0,0,0.8);
                    color: white;
                    padding: 12px 20px;
                    border-radius: 25px;
                    z-index: 2000;
                    animation: slideIn 0.3s ease;
                    font-size: 14px;
                    max-width: 300px;
                    word-wrap: break-word;
                `;

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    const style = document.createElement("style");
    style.textContent = `
                    @keyframes slideIn {
                        from { transform: translateX(100%); opacity: 0; }
                        to { transform: translateX(0); opacity: 1; }
                    }
                `;
    document.head.appendChild(style);

    document.body.appendChild(notification);

    // –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
      if (notification.parentNode) {
        notification.style.animation = "slideIn 0.3s ease reverse";
        setTimeout(() => {
          if (notification.parentNode) {
            notification.parentNode.removeChild(notification);
          }
        }, 300);
      }
    }, 3000);
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener("DOMContentLoaded", () => {
  new ColorPaletteSite();
});

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
class Utils {
  static getContrastColor(hexColor) {
    // –ü—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
    const r = parseInt(hexColor.slice(1, 3), 16);
    const g = parseInt(hexColor.slice(3, 5), 16);
    const b = parseInt(hexColor.slice(5, 7), 16);
    const brightness = (r * 299 + g * 587 + b * 114) / 1000;
    return brightness > 128 ? "#000000" : "#ffffff";
  }

  static debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
      const later = () => {
        clearTimeout(timeout);
        func(...args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  }
}
